#Clip 01
- Protocol is a set of rules between devices to communicate. Some examplese of Protocol is HTTP (web), FTP (files transfer), SMTP (email)...
- IP is Internet Protocol, is a set of number to specify a device that connects to internet
- TCP (transmission control protocol) is the way that information is sent. By using TCP, information is taken and splitted into many pieces. These pieces are sent one at a time through the socket. Eeach individual piece is called package
	+ comparing with node, TCP - socket - package is something like stream-pipelines-chunk
- Socket is an idea last for long time:
	+ Socket in general: sockets is opened and closed generally: flow would be: asking for the information, receive it and then socket is closed. Then we make another request (click a link, ask to download an image...), and new sockets are opened
	+ Sock in web-socket: idea of web socket is newer one when a socket is opened constantly

#Clip 02
- Port: once a computer receives a packet, how it knows a program to sent it to?
	When a program is setup on the operating system to receive packets from a particular port, it's said that the program "is listening" to that port
	For example:
		Web Broswer ---- (send requests) ----> Web server (NodeJS, Email, FTP). How do we know which server's application (NodeJS, Email, FTP) will handle web's requests ?
		-> Application should be configured to listen at particular ports, such as: NodeJS (80, 443,...)

#Clip 03
- HTTP (hyper text Transfer Protocol): is a set of rules (and a format) for data being transfered on the web. It's a format(of various) defining data being transfered via TCP/IP
	For example: a HTTP response from server:
		HTTP/1.1 200 OK							(status)
		Content-length: 44						(headers)
		Content-Type: text/html					(headers)
		<html><head>...</head></html>			(body)
	By using this structure, both client will understand what server is saying. body part can be a html file, image, json file, javascript file...

	Content-Type (MIME type): a standard for specifing the type of data being sent. MIME is Multiple Internet Mail Extensions (such as: application/json, text/html, image/jpeg)
	Browser will check this content-type, then have the corresponding behavior for each content type:
		image/jpeg: show image
		text/html: render a web page

#Clip 06:
- Templates is text designed to be the basis for final text or content after being processed. There's usually some specific template language, so the template systems knows how to replace placeholders with real value 

#Clip 06 + 07:
- Clip 06:
	var html = fs.readFileSync(__dirname + '/index.htm', 'utf8');
	-> toàn bộ nội dung file index.html sẽ được đưa vào stream rồi mới gửi về user
	-> khi có nhiều user cùng truy cập vào file index.htm này mà file này lớn -> server mất nhiều thời gian xử lý -> giảm performance

- Clip 07:
	var html = fs.createReadStream(__dirname + '/index.html').pipe(res);
	-> nội dung file index.html được chia nhỏ thành các "chunk" sau đó gửi vào pipe theo từng chunk và bắn dần dần tới người dùng
	-> server xử lý dần dần, hiệu năng được đảm bảo khi có nhiều người dùng

#Clip 08:
	- API - Application Programming Interface: is a set of tools for building a software application. It's set of URLs that accept and send data usually via HTTP and TCP/IP.
	- Endpoint: is one URL in a web API. Sometimes that endpoint (URL) does multiple thing by making choices based on the HTTP request headers.

#Clip 09:
	- Serialize: is translating an object into a format that can be stored or transferred such as JSON, CSV, XML and other popular ones.
	- Deserialize: is the opposite with serialize (converting format back into an object)

#Clip 10:
	- Routing: mapping HTTP requests to content